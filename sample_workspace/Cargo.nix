
# Generated by crate2nix 0.7.0-alpha.1 with the command:
#   "generate" "-f" "sample_workspace/Cargo.toml" "-o" "sample_workspace/Cargo.nix"
# See https://github.com/kolloch/crate2nix for more info.

{ pkgs? import <nixpkgs> { config = {}; },
  lib? pkgs.lib,
  callPackage? pkgs.callPackage,
  stdenv? pkgs.stdenv,
  buildRustCrate? pkgs.buildRustCrate,
  fetchurl? pkgs.fetchurl,
  fetchCrate? pkgs.fetchCrate,
  defaultCrateOverrides? pkgs.defaultCrateOverrides,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures? ["default"]}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "bin_with_default_features" = {
      packageId = "bin_with_default_features 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/bin_with_default_features)";
      build = buildRustCrateWithFeatures {
        packageId = "bin_with_default_features 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/bin_with_default_features)";
        features = rootFeatures;
      };
    };
    "hello_world_bin" = {
      packageId = "hello_world_bin 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/bin)";
      build = buildRustCrateWithFeatures {
        packageId = "hello_world_bin 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/bin)";
        features = rootFeatures;
      };
    };
    "hello_world_lib" = {
      packageId = "hello_world_lib 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/lib)";
      build = buildRustCrateWithFeatures {
        packageId = "hello_world_lib 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/lib)";
        features = rootFeatures;
      };
    };
    "hello_world_lib_and_bin" = {
      packageId = "hello_world_lib_and_bin 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/lib_and_bin)";
      build = buildRustCrateWithFeatures {
        packageId = "hello_world_lib_and_bin 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/lib_and_bin)";
        features = rootFeatures;
      };
    };
    "hello_world_with_dep" = {
      packageId = "hello_world_with_dep 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/bin_with_lib_dep)";
      build = buildRustCrateWithFeatures {
        packageId = "hello_world_with_dep 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/bin_with_lib_dep)";
        features = rootFeatures;
      };
    };
    "with_tera" = {
      packageId = "with_tera 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/with_tera)";
      build = buildRustCrateWithFeatures {
        packageId = "with_tera 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/with_tera)";
        features = rootFeatures;
      };
    };
  };
  workspace_members =
    builtins.trace
      "workspace_members is deprecated in crate2nix 0.4. Please use workspaceMembers instead."
      lib.mapAttrs (n: v: v.build) workspaceMembers;

  #
  # "private" attributes that may change in every new version of crate2nix.
  #

  # Build and dependency information for crates.
  # Many of the fields are passed one-to-one to buildRustCrate.
  #
  # Noteworthy:
  # * `crateBin = [{name = ","; path = ",";}];`: a hack to disable building the binary.
  # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
  #   but with additional information which is used during dependency/feature resolution.
  # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.

  crates = {
    "aho-corasick 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "aho-corasick";
        version = "0.6.10";
        edition = "2015";
        # Hack to suppress building binaries
        crateBin = [{name = ","; path = ",";}];
        sha256 = "0bhasxfpmfmz1460chwsx59vdld05axvmk1nbp3sd48xav3d108p";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "aho-corasick 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "aho-corasick";
        version = "0.7.3";
        edition = "2015";
        sha256 = "0dn42fbdms4brigqphxrvzbjd1s4knyjlzky30kgvpnrcl4sqqdv";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "arrayref";
        version = "0.3.5";
        edition = "2015";
        sha256 = "00dfn9lbr4pc524imc25v3rbmswiqk3jldsgmx4rdngcpxb8ssjf";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];
        features = {
        };
      };
    "bin_with_default_features 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/bin_with_default_features)"
      = rec {
        crateName = "bin_with_default_features";
        version = "0.1.0";
        edition = "2018";
        crateBin = [
          { name = "bin_with_default_features"; path = "src/main.rs"; }
        ];
        src = (builtins.filterSource sourceFilter ./bin_with_default_features);
        authors = [
          "Peter Kolloch <info@eigenvalue.net>"
        ];
        dependencies = [
          {
            name = "hello_world_lib";
            packageId = "hello_world_lib 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/lib)";
            optional = true;
          }
        ];
        features = {
          "default" = [ "use_lib" ];
          "use_lib" = [ "hello_world_lib" ];
        };
        resolvedDefaultFeatures = [ "default" "hello_world_lib" "use_lib" ];
      };
    "block-buffer 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "block-buffer";
        version = "0.3.3";
        edition = "2015";
        sha256 = "0ka14535hlndyig1dqxqvdv60mgmnnhfi6x87npha3x3yg5sx201";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "byte-tools";
        version = "0.2.0";
        edition = "2015";
        sha256 = "15cm6sxkk2ikrz8sxld3hv9g419j4kjzwdjp4fn53gjq07awq6il";
        authors = [
          "The Rust-Crypto Project Developers"
        ];
        features = {
        };
      };
    "cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "cfg-if";
        version = "0.1.7";
        edition = "2015";
        sha256 = "13gvcx1dxjq4mpmpj26hpg3yc97qffkx2zi58ykr1dwr8q2biiig";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
        };
      };
    "chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "chrono";
        version = "0.4.6";
        edition = "2015";
        sha256 = "0cxgqgf4lknsii1k806dpmzapi2zccjpa350ns5wpb568mij096x";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          }
        ];
        features = {
          "clock" = [ "time" ];
          "default" = [ "clock" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "time" ];
      };
    "crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "crossbeam-channel";
        version = "0.3.8";
        edition = "2015";
        sha256 = "0apm8why2qsgr8ykh9x677kc9ml7qp71mvirfkdzdn4c1jyqyyzm";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "crossbeam-utils";
        version = "0.6.5";
        edition = "2015";
        sha256 = "1z7wgcl9d22r2x6769r5945rnwf3jqfrrmb16q7kzk292r1d4rdg";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
    "deunicode 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "deunicode";
        version = "0.4.3";
        edition = "2015";
        sha256 = "138gv1cadzf9pf6i2wnmsbk927zfivpp0g74c1jnp7z3g4mwfdgl";
        authors = [
          "Kornel Lesinski <kornel@geekhood.net>"
          "Amit Chowdhury <amitc97@gmail.com>"
        ];
        features = {
        };
      };
    "digest 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "digest";
        version = "0.7.6";
        edition = "2015";
        sha256 = "074cw6sk5qfha3gjwgx3fg50z64wrabszfkrda2mi6b3rjrk80d4";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "fake-simd";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1a0f1j66nkwfy17s06vm2bn9vh8vy8llcijfhh9m10p58v08661a";
        authors = [
          "The Rust-Crypto Project Developers"
        ];
        features = {
        };
      };
    "fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "fnv";
        version = "1.0.6";
        edition = "2015";
        sha256 = "128mlh23y3gg6ag5h8iiqlcbl59smisdzraqy88ldrf75kbw27ip";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
        };
      };
    "generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "generic-array";
        version = "0.9.0";
        edition = "2015";
        sha256 = "1gk3g5yxvh361syfz38nlf6vg7d0qx7crpa83mnqzaf9dymz19g7";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "globset 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "globset";
        version = "0.4.2";
        edition = "2015";
        sha256 = "0cymxnzzzadk13f344gska1apvggc0mnd3klhw3h504vhqrb1l2b";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "fnv";
            packageId = "fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "log";
            packageId = "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "memchr";
            packageId = "memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "regex";
            packageId = "regex 1.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "globwalk 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "globwalk";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0i9d51hb06m4pq1mnk3x2rxi60283yhjw6my3i0nhpjsf97hrqfj";
        authors = [
          "Gilad Naaman <gilad@naaman.io>"
        ];
        dependencies = [
          {
            name = "ignore";
            packageId = "ignore 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "walkdir";
            packageId = "walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "hello_world_bin 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/bin)"
      = rec {
        crateName = "hello_world_bin";
        version = "0.1.0";
        edition = "2018";
        crateBin = [
          { name = "hello_world_bin"; path = "src/main.rs"; }
        ];
        src = (builtins.filterSource sourceFilter ./bin);
        authors = [
          "Peter Kolloch <info@eigenvalue.net>"
        ];
        features = {
        };
      };
    "hello_world_lib 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/lib)"
      = rec {
        crateName = "hello_world_lib";
        version = "0.1.0";
        edition = "2018";
        src = (builtins.filterSource sourceFilter ./lib);
        authors = [
          "Peter Kolloch <info@eigenvalue.net>"
        ];
        features = {
        };
      };
    "hello_world_lib_and_bin 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/lib_and_bin)"
      = rec {
        crateName = "hello_world_lib_and_bin";
        version = "0.1.0";
        edition = "2018";
        crateBin = [
          { name = "hello_world_lib_and_bin"; path = "src/main.rs"; }
        ];
        src = (builtins.filterSource sourceFilter ./lib_and_bin);
        authors = [
          "Peter Kolloch <info@eigenvalue.net>"
        ];
        features = {
        };
      };
    "hello_world_with_dep 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/bin_with_lib_dep)"
      = rec {
        crateName = "hello_world_with_dep";
        version = "0.1.0";
        edition = "2018";
        crateBin = [
          { name = "hello_world_with_dep"; path = "src/main.rs"; }
        ];
        src = (builtins.filterSource sourceFilter ./bin_with_lib_dep);
        authors = [
          "Peter Kolloch <info@eigenvalue.net>"
        ];
        dependencies = [
          {
            name = "hello_world_lib";
            packageId = "hello_world_lib 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/lib)";
          }
        ];
        features = {
        };
      };
    "humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "humansize";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1s7jj570vz90b7wsgd24lla1yn9qp3swgv9c7jgkgrw6bxynbv0p";
        authors = [
          "Leopold Arkham <leopold.arkham@gmail.com>"
        ];
        features = {
        };
      };
    "idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "idna";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1gwgl19rz5vzi67rrhamczhxy050f5ynx4ybabfapyalv7z1qmjy";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "ignore 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "ignore";
        version = "0.4.6";
        edition = "2015";
        sha256 = "1gx1dia1ws3qm2m7pxfnsp43i0wz2fkzn4yv6zxqzib7qp3cpzb6";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "globset";
            packageId = "globset 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "log";
            packageId = "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "memchr";
            packageId = "memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "regex";
            packageId = "regex 1.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "same-file";
            packageId = "same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "thread_local";
            packageId = "thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "walkdir";
            packageId = "walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
            target = features: target."windows";
          }
        ];
        features = {
          "simd-accel" = [ "globset/simd-accel" ];
        };
      };
    "itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "itoa";
        version = "0.4.3";
        edition = "2015";
        sha256 = "0zadimmdgvili3gdwxqg7ljv3r4wcdg1kkdfp9nl15vnm23vrhy1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "lazy_static";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1vv47va18ydk7dx5paz88g3jy1d3lwbx6qpxkbj8gyfv770i4b1y";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
    "libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "libc";
        version = "0.2.51";
        edition = "2015";
        sha256 = "1lzavxj1ymm7vghs6nmzq9shprdlqby73py9k30gwvv0dwy365cv";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "use_std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
    "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "log";
        version = "0.4.6";
        edition = "2015";
        sha256 = "1nd8dl9mvc9vd6fks5d4gsxaz990xi6rzlb8ymllshmwi153vngr";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "maplit";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1lcadhrcy2qyb6zazmzj7gvgb50rmlvkcivw287016j4q723x72g";
        authors = [
          "bluss"
        ];
        features = {
        };
      };
    "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "matches";
        version = "0.1.8";
        edition = "2015";
        sha256 = "03hl636fg6xggy0a26200xs74amk3k9n0908rga2szn68agyz3cv";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
        };
      };
    "memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "memchr";
        version = "2.2.0";
        edition = "2015";
        sha256 = "11vwg8iig9jyjxq3n1cq15g29ikzw5l7ar87md54k1aisjs0997p";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
    "nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "nom";
        version = "4.2.3";
        edition = "2015";
        sha256 = "0rg7n0nif70052wlaffmgxmmlvi6xm7zpqmzfq9d8wr9376lpn2h";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
          "default" = [ "std" ];
          "regexp" = [ "regex" ];
          "regexp_macros" = [ "regexp" "lazy_static" ];
          "std" = [ "alloc" "memchr/use_std" ];
          "verbose-errors" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
    "num-integer 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "num-integer";
        version = "0.1.39";
        edition = "2015";
        sha256 = "1f42ls46cghs13qfzgbd7syib2zc6m7hlmv1qlar6c9mdxapvvbg";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
      };
    "num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "num-traits";
        version = "0.2.6";
        edition = "2015";
        sha256 = "1d20sil9n0wgznd1nycm3yjfj1mzyl41ambb7by1apxlyiil1azk";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
    "percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "percent-encoding";
        version = "1.0.1";
        edition = "2015";
        sha256 = "04ahrp7aw4ip7fmadb0bknybmkfav0kk0gw4ps3ydq5w6hr0ib5i";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
        features = {
        };
      };
    "pest 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "pest";
        version = "2.1.0";
        edition = "2015";
        sha256 = "1kh0j52na3pm49zqnqw85q2y8wbim0sgza5j861qdmbbp4rdz1xc";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "ucd-trie";
            packageId = "ucd-trie 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "pest_derive 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "pest_derive";
        version = "2.1.0";
        edition = "2015";
        sha256 = "03bsaw7jpsk6x3dbrs9bjx5najjdvslb9y77azfn1n403khrqvnm";
        procMacro = true;
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "pest_generator";
            packageId = "pest_generator 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "pest_generator 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "pest_generator";
        version = "2.1.0";
        edition = "2015";
        sha256 = "089vf75na5md5jip3gl6m6k97x7qq195jxqvgxi8pa6vcszy4a50";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "pest_meta";
            packageId = "pest_meta 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "quote";
            packageId = "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "syn";
            packageId = "syn 0.15.30 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "pest_meta 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "pest_meta";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0f07nxzdqc5hca9m9wwqfy7mq68nya48k6lra3c26w9hr85lyyr3";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "maplit";
            packageId = "maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "pest";
            packageId = "pest 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        buildDependencies = [
          {
            name = "sha-1";
            packageId = "sha-1 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "proc-macro2";
        version = "0.4.27";
        edition = "2015";
        sha256 = "1cp4c40p3hwn2sz72ssqa62gp5n8w4gbamdqvvadzp5l7gxnq95i";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
    "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "quote";
        version = "0.6.11";
        edition = "2015";
        sha256 = "0agska77z58cypcq4knayzwx7r7n6m756z1cz9cp2z4sv0b846ga";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
    "redox_syscall 0.1.53 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "redox_syscall";
        version = "0.1.53";
        edition = "2015";
        sha256 = "1g7arnyxly8ji14am62w2pxib1rll908rcb4iw2w80yl1wyg2x9y";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        features = {
        };
      };
    "regex 1.1.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "regex";
        version = "1.1.5";
        edition = "2015";
        sha256 = "0r2y4pmg2089qfi65cgzx49zsw4ncrlxnhalq21gv3v73bz5i3j8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "memchr";
            packageId = "memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "thread_local";
            packageId = "thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "utf8-ranges";
            packageId = "utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "unstable" = [ "pattern" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
    "regex-syntax 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "regex-syntax";
        version = "0.6.6";
        edition = "2015";
        sha256 = "1cjrdc3affa3rjfaxkp91xnf9k0fsqn9z4xqc280vv39nvrl8p8b";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "ucd-util";
            packageId = "ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "ryu";
        version = "0.2.7";
        edition = "2015";
        sha256 = "0m8szf1m87wfqkwh1f9zp9bn2mb0m9nav028xxnd0hlig90b44bd";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
    "same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "same-file";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1zs244ssl381cqlnh2g42g3i60qip4z72i26z44d6kas3y3gy77q";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
            target = features: target."windows";
          }
        ];
        features = {
        };
      };
    "serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "serde";
        version = "1.0.90";
        edition = "2015";
        sha256 = "10b6n74m1dvb667vrn1db47ncb4h0mkqbg1dsamqjvv5vl5b5j56";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "alloc" = [ "unstable" ];
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "serde_json";
        version = "1.0.39";
        edition = "2015";
        sha256 = "07ydv06hn8x0yl0rc94l2wl9r2xz1fqd97n1s6j3bgdc6gw406a8";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "ryu";
            packageId = "ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "serde";
            packageId = "serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "sha-1 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "sha-1";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0dxvdr91zc6wi8wgbs0h745b6315xxdy2zpn4qmxnaqzzc55dpxz";
        libName = "sha1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "digest";
            packageId = "digest 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "fake-simd";
            packageId = "fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
        };
      };
    "slug 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "slug";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0ijcaqi7mxbib6jag9ldjph9kd3ajh13rajqmzpvd3nqn5mdk6p4";
        authors = [
          "Steven Allen <steven@stebalien.com>"
        ];
        dependencies = [
          {
            name = "deunicode";
            packageId = "deunicode 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "smallvec";
        version = "0.6.9";
        edition = "2015";
        sha256 = "0p96l51a2pq5y0vn48nhbm6qslbc6k8h28cxm0pmzkqmj7xynz6w";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "syn 0.15.30 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "syn";
        version = "0.15.30";
        edition = "2015";
        sha256 = "0rdjg37f7h1yqwmzqji4ll82xzzxv8k6vrf55p53c8dl49vqlgnx";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "parsing" "printing" "proc-macro" "quote" ];
      };
    "tera 1.0.0-beta.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "tera";
        version = "1.0.0-beta.3";
        edition = "2018";
        sha256 = "0wk3jkk9b3vd847704lpx4mkdx84hnj5iqrwjlpdvw4v98f629a9";
        authors = [
          "Vincent Prouillet <prouillet.vincent@gmail.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "globwalk";
            packageId = "globwalk 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "humansize";
            packageId = "humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "pest";
            packageId = "pest 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "pest_derive";
            packageId = "pest_derive 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "regex";
            packageId = "regex 1.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "serde";
            packageId = "serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "serde_json";
            packageId = "serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "slug";
            packageId = "slug 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "unic-segment";
            packageId = "unic-segment 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "url";
            packageId = "url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "v_htmlescape";
            packageId = "v_htmlescape 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
          "preserve_order" = [ "serde_json/preserve_order" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "thread_local";
        version = "0.3.6";
        edition = "2015";
        sha256 = "02rksdwjmz2pw9bmgbb4c0bgkbq5z6nvg510sq1s6y2j1gam0c7i";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "time";
        version = "0.1.42";
        edition = "2015";
        sha256 = "1ny809kmdjwd4b478ipc33dz7q6nq7rxk766x8cnrg6zygcksmmx";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.1.53 (registry+https://github.com/rust-lang/crates.io-index)";
            target = features: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)";
            target = features: target."windows";
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        features = {
        };
      };
    "typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "typenum";
        version = "1.10.0";
        edition = "2015";
        sha256 = "1v2cgg0mlzkg5prs7swysckgk2ay6bpda8m83c2sn3z77dcsx3bc";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
        };
      };
    "ucd-trie 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "ucd-trie";
        version = "0.1.1";
        edition = "2015";
        sha256 = "12awmddm5d31whgd1q309gz1q8qa4i1h9fwf1h71k1d4ivxss68m";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "ucd-util";
        version = "0.1.3";
        edition = "2015";
        sha256 = "1n1qi3jywq5syq90z9qd8qzbn58pcjgv1sx4sdmipm4jf9zanz15";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
        };
      };
    "unic-char-property 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unic-char-property";
        version = "0.9.0";
        edition = "2018";
        sha256 = "02q2nn58k4m4rpvyw0jyvskipvz80zi6hc5s9biancxx4c740fc6";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-range";
            packageId = "unic-char-range 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "unic-char-range 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unic-char-range";
        version = "0.9.0";
        edition = "2018";
        sha256 = "04gm2jfbgaa5xcx60iiav2v10rl41j4zkkj3fcwhaw49z40dj6vi";
        authors = [
          "The UNIC Project Developers"
        ];
        features = {
          "unstable" = [ "exact-size-is-empty" "fused" "trusted-len" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "unic-common 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unic-common";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1179jkf380fmlz1dnavzkkwx5nkk86ljbfq5kc1nyhz8bar9g9vc";
        authors = [
          "The UNIC Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "unic-segment 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unic-segment";
        version = "0.9.0";
        edition = "2018";
        sha256 = "165nlhq8qymf24yhv6sfhs9xr6ag1a5n4sd25a7sj8kz7vbz98ll";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-ucd-segment";
            packageId = "unic-ucd-segment 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "unic-ucd-segment 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unic-ucd-segment";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1wqw5fsyp4s1j5m4ks1aliqam0d1vw3d9qwhqnz1bsjs5hnkxwx7";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "unic-ucd-version 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unic-ucd-version";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1z6dm8zhpznxfm07dizj397lrs9rha25g2hxdg05pb781kqi85rb";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-common";
            packageId = "unic-common 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-bidi";
        version = "0.3.4";
        edition = "2015";
        sha256 = "0lcd6jasrf8p9p0q20qyf10c6xhvw40m2c4rr105hbk6zy26nj1q";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
          "flame_it" = [ "flame" "flamer" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "unicode-normalization 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-normalization";
        version = "0.1.8";
        edition = "2015";
        sha256 = "1pb26i2xd5zz0icabyqahikpca0iwj2jd4145pczc4bb7p641dsz";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-xid";
        version = "0.1.0";
        edition = "2015";
        sha256 = "05wdmwlfzxhq3nhsxn6wx4q8dhxzzfb9szsz6wiw092m1rjj01zj";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "url";
        version = "1.7.2";
        edition = "2015";
        sha256 = "0qzrjzd9r1niv7037x4cgnv98fs1vj0k18lpxx890ipc47x5gc09";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna";
            packageId = "idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "matches";
            packageId = "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
          "heap_size" = [ "heapsize" ];
          "query_encoding" = [ "encoding" ];
        };
      };
    "utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "utf8-ranges";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1my02laqsgnd8ib4dvjgd4rilprqjad6pb9jj9vi67csi5qs2281";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
        };
      };
    "v_escape 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "v_escape";
        version = "0.7.2";
        edition = "2018";
        sha256 = "05rhxmk2mzf1pcna4idilmhdqp95vdy2k3ixx7iqgncjidxkaiaw";
        authors = [
          "Rust-iendo Barcelona <riendocontributions@gmail.com>"
        ];
        dependencies = [
          {
            name = "v_escape_derive";
            packageId = "v_escape_derive 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "version_check";
            packageId = "version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "v_escape_derive 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "v_escape_derive";
        version = "0.5.3";
        edition = "2018";
        sha256 = "0wgyvapii8bnz2g52i3al5vycbiplr62bfmvlv2pplrj9ff40pv3";
        procMacro = true;
        authors = [
          "Rust-iendo Barcelona <riendocontributions@gmail.com>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "quote";
            packageId = "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "syn";
            packageId = "syn 0.15.30 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "v_htmlescape 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "v_htmlescape";
        version = "0.4.3";
        edition = "2018";
        sha256 = "09vma0ydjnah6j7d2s7yahx6bqri54pmxj84sv9wmggnidg3d0qx";
        authors = [
          "Rust-iendo Barcelona <riendocontributions@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "v_escape";
            packageId = "v_escape 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        buildDependencies = [
          {
            name = "v_escape";
            packageId = "v_escape 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
    "version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "version_check";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1yrx9xblmwbafw2firxyqbj8f771kkzfd24n3q7xgwiqyhi0y8qd";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        features = {
        };
      };
    "walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "walkdir";
        version = "2.2.7";
        edition = "2015";
        sha256 = "0wq3v28916kkla29yyi0g0xfc16apwx24py68049kriz3gjlig03";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)";
            target = features: target."windows";
            features = [ "std" "winnt" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
            target = features: target."windows";
          }
        ];
        features = {
        };
      };
    "winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi";
        version = "0.3.7";
        edition = "2015";
        sha256 = "1k51gfkp0zqw7nj07y443mscs46icmdhld442s2073niap0kkdr8";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
            target = features: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
            target = features: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "minwinbase" "minwindef" "ntdef" "processenv" "profileapi" "std" "sysinfoapi" "timezoneapi" "winbase" "wincon" "winerror" "winnt" ];
      };
    "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        features = {
        };
      };
    "winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi-util";
        version = "0.1.2";
        edition = "2015";
        sha256 = "07jj7rg7nndd7bqhjin1xphbv8kb5clvhzpqpxkvm3wl84r3mj1h";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)";
            target = features: target."windows";
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];
        features = {
        };
      };
    "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        features = {
        };
      };
    "with_tera 0.1.0 (path+file:///home/cloud/Documents/code/nix/crate2nix/sample_workspace/with_tera)"
      = rec {
        crateName = "with_tera";
        version = "0.1.0";
        edition = "2018";
        crateBin = [
          { name = "with_tera"; path = "src/main.rs"; }
        ];
        src = (builtins.filterSource sourceFilter ./with_tera);
        authors = [
          "Peter Kolloch <info@eigenvalue.net>"
        ];
        dependencies = [
          {
            name = "tera";
            packageId = "tera 1.0.0-beta.3 (registry+https://github.com/rust-lang/crates.io-index)";
          }
        ];
        features = {
        };
      };
  };

  #
  # crate2nix/default.nix (excerpt start)
  # 

  # Target (platform) data for conditional dependencies.
  # This corresponds roughly to what buildRustCrate is setting.
  target = {
      unix = true;
      windows = false;
      # We don't support tests yet, so this is true for now.
      test = false;

      # This doesn't appear to be officially documented anywhere yet.
      # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
      os = if stdenv.hostPlatform.isDarwin
        then "macos"
        else stdenv.hostPlatform.parsed.kernel.name;
      arch = stdenv.hostPlatform.parsed.cpu.name;
      family = "unix";
      env = "gnu";
      endian = if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian" then "little" else "big";
      pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
      vendor = stdenv.hostPlatform.parsed.vendor.name;
      debug_assertions = false;
  };

  /* Filters common temp files and build files */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let baseName = builtins.baseNameOf (builtins.toString name);
    in ! (
      # Filter out git
      baseName == ".gitignore" ||
      (type == "directory" && baseName == ".git" ) ||

      # Filter out build results
      (type == "directory" && (
        baseName == "target" ||
        baseName == "_site" ||
        baseName == ".sass-cache" ||
        baseName == ".jekyll-metadata" ||
        baseName == "build-artifacts"
        )) ||

      # Filter out nix-build result symlinks
      (type == "symlink" && lib.hasPrefix "result" baseName) ||

      # Filter out IDE config
      (type == "directory" && (
        baseName == ".idea" ||
        baseName == ".vscode"
        )) ||
      lib.hasSuffix ".iml" baseName ||

      # Filter out nix build files
      # lib.hasSuffix ".nix" baseName ||

      # Filter out editor backup / swap files.
      lib.hasSuffix "~" baseName ||
      builtins.match "^\\.sw[a-z]$$" baseName != null ||
      builtins.match "^\\..*\\.sw[a-z]$$" baseName != null ||
      lib.hasSuffix ".tmp" baseName ||
      lib.hasSuffix ".bak" baseName ||
      baseName == "tests.nix"
    );

  /* A restricted overridable version of  buildRustCrateWithFeaturesImpl. */
  buildRustCrateWithFeatures = {packageId, features, crateOverrides ? defaultCrateOverrides}:
    lib.makeOverridable
      ({features, crateOverrides}: buildRustCrateWithFeaturesImpl {inherit packageId features crateOverrides;})
      { inherit features crateOverrides; };

  /* Returns a buildRustCrate derivation for the given packageId and features. */
  buildRustCrateWithFeaturesImpl = { crateConfigs? crates, packageId, features, crateOverrides } @ args:
    assert (builtins.isAttrs crateConfigs);
    assert (builtins.isString packageId);
    assert (builtins.isList features);

    let mergedFeatures = mergePackageFeatures args;
        buildByPackageId = packageId:
          let features = mergedFeatures."${packageId}" or [];
              crateConfig = lib.filterAttrs (n: v: n != "resolvedDefaultFeatures") crateConfigs."${packageId}";
              dependencies =
                dependencyDerivations buildByPackageId features (crateConfig.dependencies or []);
              buildDependencies =
                dependencyDerivations buildByPackageId features (crateConfig.buildDependencies or []);
              dependenciesWithRenames =
                lib.filter (d: d ? "rename")
                  (crateConfig.buildDependencies or [] ++ crateConfig.dependencies or []);
              crateRenames =
                builtins.listToAttrs (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in buildRustCrate (crateConfig // { inherit features dependencies buildDependencies crateRenames; });
    in buildByPackageId packageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations = buildByPackageId: features: dependencies:
    assert (builtins.isFunction buildByPackageId);
    assert (builtins.isList features);
    assert (builtins.isList dependencies);

    let enabledDependencies = filterEnabledDependencies dependencies features;
        depDerivation = dependency:
        buildByPackageId (dependencyPackageId dependency);
    in map depDerivation enabledDependencies;

  /* Returns differences between cargo default features and crate2nix default features.
   *
   * This is useful for verifying the feature resolution in crate2nix.
   */
  diffDefaultPackageFeatures = {crateConfigs ? crates, packageId}:
    assert (builtins.isAttrs crateConfigs);

    let prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures {inherit crateConfigs packageId; features = ["default"]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo = builtins.attrNames (lib.filterAttrs (n: v: !(v ? "crate2nix" ) && (v ? "cargo")) combined);
        onlyInCrate2Nix = builtins.attrNames (lib.filterAttrs (n: v: (v ? "crate2nix" ) && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (n: v:
          (v ? "crate2nix" )
          && (v ? "cargo")
          && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or []))
          combined;
    in builtins.toJSON { inherit onlyInCargo onlyInCrate2Nix differentFeatures; };

  /* Returns the feature configuration by package id for the given input crate. */
  mergePackageFeatures = {
      crateConfigs ? crates, 
      packageId, 
      features, ...} @ args:
    assert (builtins.isAttrs crateConfigs);
    assert (builtins.isString packageId);
    assert (builtins.isList features);

    let packageFeatures = listOfPackageFeatures args;
        grouped = lib.groupBy (x: x.packageId) packageFeatures;
    in lib.mapAttrs (n: v: sortedUnique (builtins.concatLists (builtins.map (v: v.features) v))) grouped;

  /* Returns a { packageId, features } attribute set for every package needed for building the
     package for the given packageId with the given features.

     Returns multiple, potentially conflicting attribute sets for dependencies that are reachable
     by multiple paths in the dependency tree.
  */
  listOfPackageFeatures = {crateConfigs ? crates, packageId, features, dependencyPath? [packageId], ...} @ args:
    assert (builtins.isAttrs crateConfigs);
    assert (builtins.isString packageId);
    assert (builtins.isList features);

    let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let packageId = dependencyPackageId dependency;
              features = dependencyFeatures expandedFeatures dependency.name dependency;
          in { inherit packageId features; };

        resolveDependencies = path: dependencies:
          assert (builtins.isList dependencies);

          let enabledDependencies = filterEnabledDependencies dependencies expandedFeatures;
              directDependencies = map depWithResolvedFeatures enabledDependencies;
          in builtins.concatMap
            ({packageId, features}: listOfPackageFeatures {
              # This is purely for debugging.
              dependencyPath = dependencyPath ++ [path packageId];
              inherit crateConfigs packageId features;
            })
             directDependencies;

        resolvedDependencies = builtins.concatLists
          [
            (resolveDependencies "dependencies" (crateConfig.dependencies or []))
            (resolveDependencies "buildDependencies" (crateConfig.buildDependencies or []))
          ];

    in [{inherit packageId; features = expandedFeatures;}] ++ resolvedDependencies;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = dependencies: features:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);

    lib.filter
      (dep:
        let targetFunc = dep.target or (features: true);
            target = targetFunc features;
        in builtins.isString dep
        || target
        && (!(dep.optional or false) || builtins.any (doesFeatureEnableDependency dep.name) features))
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = depName: feature:
    let prefix = "${depName}/";
        len = builtins.stringLength prefix;
        startsWithPrefix = builtins.substring 0 len feature == prefix;
    in feature == depName || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further feature names to enable in case this
     feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);

    let expandFeature = feature:
          assert (builtins.isString feature);
          [feature] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
        outFeatures = builtins.concatMap expandFeature inputFeatures;
    in sortedUnique outFeatures;

  /* The package ID of the given dependency. */
  dependencyPackageId = dependency: if builtins.isString dependency then dependency else dependency.packageId;

  /* Returns the actual dependencies for the given dependency. */
  dependencyFeatures = features: dependencyName: dependency:
    assert (builtins.isList features);
    assert (builtins.isString dependencyName);
    assert (builtins.isAttrs dependency || builtins.isString dependency);

    let defaultOrNil = if builtins.isString dependency || dependency.usesDefaultFeatures or true
                       then ["default"]
                       else [];
        explicitFeatures = if builtins.isString dependency then [] else dependency.features or [];
        additionalDependencyFeatures =

          let dependencyPrefix = dependencyName+"/";
              dependencyFeatures =
                builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
          in builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);

    let outFeaturesSet = lib.foldl (set: feature: set // {"${feature}" = 1;} ) {} features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in builtins.sort (a: b: a < b) outFeaturesUnique;

  #
  # crate2nix/default.nix (excerpt end)
  # 

}
