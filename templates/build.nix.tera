{# Argument: struct crate2nix::BuildInfo
   Rendered via https://tera.netlify.com
#}
# Generated by crate2nix {{info.crate2nix_version | safe}} with the command:
#  {% for arg in info.crate2nix_arguments %} {{arg}}{% endfor %}
# See https://github.com/kolloch/crate2nix for more info.

{ pkgs? import {{config.nixpkgs_path | safe}} { config = {}; },
  lib? pkgs.lib,
  callPackage? pkgs.callPackage,
  stdenv? pkgs.stdenv,
  buildRustCrate? pkgs.buildRustCrate,
  fetchurl? pkgs.fetchurl,
  fetchCrate? pkgs.fetchCrate,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures? ["default"]}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  {% if root_package_id -%}
  # Use this attribute to refer to the derivation building your root crate.
  # You can override the features with rootCrate.override { features = [ "default" "feature1" ... ]; }.
  rootCrate = buildRustCrateWithFeatures {
    packageId = {{root_package_id}};
    features = rootFeatures;
  };
  root_crate =
    builtins.trace "root_crate is deprecated since crate2nix 0.4. Please use rootCrate instead." rootCrate;
  {%- endif -%}
  {% if workspace_members %}
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
  {%- for name, pkg_id in workspace_members %}
    {{name}} = buildRustCrateWithFeatures {
      packageId = {{pkg_id}};
      features = rootFeatures;
    };
  {%- endfor %}
  };
  workspace_members =
    builtins.trace
      "workspace_members is deprecated in crate2nix 0.4. Please use workspaceMembers instead."
      workspaceMembers;
  {%- endif %}

  #
  # "private" attributes that may change in every new version of crate2nix.
  #

  crates = {
  {%- for crate in crates %}
    {{crate.package_id}}
      = rec {
        crateName = {{crate.crate_name}};
        version = {{crate.version}};
        edition = {{crate.edition}};

        {%- if crate.has_bin and not crate.is_root_or_workspace_member %}
        # Hack to suppress building binaries
        crateBin = [{name = ","; path = ",";}];
        {%- endif -%}

        {%- if crate.source.CratesIo.sha256 %}
        sha256 = {{crate.source.CratesIo.sha256}};
        {%- elif crate.source.LocalDirectory.path %}
        src = (builtins.filterSource sourceFilter {{crate.source.LocalDirectory.path | safe}});
        {%- elif crate.source.Git %}
        src = builtins.fetchGit {
          url = {{crate.source.Git.url}};
          rev = {{crate.source.Git.rev}};
        };
        {%- else %}
        # ERROR: Could not resolve source: {{crate.source | safe | json_encode()}}
        {%- endif -%}

        {%- if crate.proc_macro %}
        procMacro = true;
        {%- endif -%}

        {%- if crate.build.src_path and crate.build.src_path != "build.rs" -%}
        {#- This defaults to "build.rs". #}
        build = {{crate.build.src_path}};
        {%- endif -%}

        {%- if crate.lib and crate.lib.name and crate.lib.name != crate.crate_name -%}
        {#- This defaults to crateName. #}
        libName = {{crate.lib.name}};
        {%- endif -%}

        {%- if crate.lib and crate.lib.src_path and crate.lib.src_path != "src/lib.rs" -%}
        {#- This defaults to empty which triggers some auto-probing. #}
        libPath = {{crate.lib.src_path}};
        {%- endif -%}

        {%- if crate.authors|length > 0 %}
        authors = [
        {%- for author in crate.authors %}
          {{author}}
        {%- endfor %}
        ];
        {%- endif -%}

        {%- if crate.dependencies|length > 0 %}
        dependencies = {
        {%- for dependency in crate.dependencies %}
          {%- if dependency.target or dependency.optional or not dependency.uses_default_features or dependency.features %}
          {{dependency.name}} = {
            packageId = {{dependency.package_id}};
            {%- if dependency.optional %}
            optional = true;
            {%- endif -%}
            {%- if not dependency.uses_default_features %}
            usesDefaultFeatures = false;
            {%- endif -%}
            {%- if dependency.target %}
            target = {{dependency.target | safe | cfg_to_nix_expr}};
            {%- endif %}
            {%- if dependency.features %}
            features = [ {% for feature in dependency.features %}{{feature}} {% endfor %}];
            {%- endif %}
          };
          {%- else %}
          {{dependency.name}} = {{dependency.package_id}};
          {%- endif -%}
        {%- endfor %}
        };
        {%- endif -%}

        {%- if crate.build_dependencies|length > 0 %}
        buildDependencies = {
        {%- for dependency in crate.build_dependencies %}
          {%- if dependency.target or dependency.optional or not dependency.uses_default_features or dependency.features %}
          {{dependency.name}} = {
            packageId = {{dependency.package_id}};
            {%- if dependency.optional %}
            optional = true;
            {%- endif -%}
            {%- if not dependency.uses_default_features %}
            usesDefaultFeatures = false;
            {%- endif -%}
            {%- if dependency.target %}
            target = {{dependency.target | safe | cfg_to_nix_expr}};
            {%- endif %}
            {%- if dependency.features %}
            features = [ {% for feature in dependency.features %}{{feature}} {% endfor %}];
            {%- endif %}
          };
          {%- else %}
          {{dependency.name}} = {{dependency.package_id}};
          {%- endif -%}
        {%- endfor %}
        };
        {%- endif -%}
        {#- #}
        features = {
        {%- for feature, features in crate.features -%}
          {%- if features | length > 0 %}
          {{feature}} = [ {% for feature in features %}{{feature}} {% endfor %}];
          {%- endif -%}
        {%- endfor %}
        };
        {%- if crate.resolved_default_features|length > 0 %}
        # The features that cargo resolved for the default build for debugging.
        resolvedDefaultFeatures = [ {% for feature in crate.resolved_default_features %}{{feature}} {% endfor %}];
        {%- endif -%}
      };
  {%- endfor %}
  };

  {% include "nix/crate2nix/default.nix" %}
}
