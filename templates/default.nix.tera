{# Argument: struct DefaultNix
   Rendered via https://tera.netlify.com
#}
# Generated by cargo2nix {{info.cargo2nix_version | safe}} with the command:
#  {% for arg in info.cargo2nix_arguments %} {{arg}}{% endfor %}

{ pkgs? import {{config.nixpkgs_path | safe}} { config = {}; },
  lib? pkgs.lib,
  callPackage? pkgs.callPackage,
  stdenv? pkgs.stdenv,
  buildRustCrate? pkgs.buildRustCrate,
  fetchurl? pkgs.fetchurl }:

rec {
    root_crate = crates.{{root_derivation_name}};
    crates = {
    {%- for crate in crates %}
        {{crate.derivation_name}}
            = buildRustCrate {
                crateName = {{crate.crate_name}};
                version = {{crate.version}};
                edition = {{crate.edition}};

                {%- if crate.has_bin and crate.derivation_name != root_derivation_name %}
                # Hack to suppress building binaries
                crateBin = [{name = ","; path = ",";}];
                {%- endif -%}

                {%- if crate.sha256 %}
                sha256 = {{crate.sha256}};
                {%- else %}
                src = (builtins.filterSource sourceFilter {{crate.source_directory | safe}});
                {%- endif -%}

                {%- if crate.proc_macro %}
                procMacro = true;
                {%- endif -%}

                {%- if crate.build %}
                build = {{crate.build}};
                {%- endif -%}

                {%- if crate.lib_path %}
                libPath = {{crate.lib_path}};
                {%- endif -%}

                {%- if crate.authors|length > 0 %}
                authors = [
                {%- for author in crate.authors %}
                    {{author}}
                {%- endfor %}
                ];
                {%- endif -%}

                {%- if crate.dependencies|length > 0 %}
                dependencies = [
                {%- for dependency in crate.dependencies %}
                    crates.{{dependency}}
                {%- endfor %}
                ];
                {%- endif -%}

                {%- if crate.build_dependencies|length > 0 %}
                buildDependencies = [
                {%- for dependency in crate.build_dependencies %}
                    crates.{{dependency}}
                {%- endfor %}
                ];
                {%- endif -%}

                {%- if crate.features|length > 0 %}
                features = [
                {%- for feature in crate.features %}
                   {{feature}}
                {%- endfor %}
                ];
                {%- endif %}
            };
    {%- endfor %}
    };

    # Utility functions

    # sourceFilter: Filters common temp files and build files
    # TODO(pkolloch): Substitute with gitignore filter
    sourceFilter = name: type:
        let baseName = builtins.baseNameOf (builtins.toString name);
        in ! (
          # Filter out git
          baseName == ".gitignore" ||
          (type == "directory" && baseName == ".git" ) ||

          # Filter out build results
          (type == "directory" && (
            baseName == "target" ||
            baseName == "_site" ||
            baseName == ".sass-cache" ||
            baseName == ".jekyll-metadata" ||
            baseName == "build-artifacts"
            )) ||

          # Filter out nix-build result symlinks
          (type == "symlink" && lib.hasPrefix "result" baseName) ||

          # Filter out IDE config
          (type == "directory" && (
            baseName == ".idea" ||
            baseName == ".vscode"
            )) ||
          lib.hasSuffix ".iml" baseName ||

          # Filter out nix build files
          lib.hasSuffix ".nix" baseName ||

          # Filter out editor backup / swap files.
          lib.hasSuffix "~" baseName ||
          builtins.match "^\\.sw[a-z]$" baseName != null ||
          builtins.match "^\\..*\\.sw[a-z]$" baseName != null ||
          lib.hasSuffix ".tmp" baseName ||
          lib.hasSuffix ".bak" baseName
        );

}
